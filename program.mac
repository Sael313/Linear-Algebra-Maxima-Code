
 to_matrix(L):=block(
    if matrixp(L) then L
    else apply('matrix,L)
 )$

check_row_echelon(A) := block(
    [rows, cols, pivots, i, j, is_echelon , B],
    B : to_matrix(A),
    rows: length(B),
    cols: length(B[1]),
    pivots: [],
    is_echelon: true,
    
      for i:1 thru rows do (
        j: 1,
        while j <= cols and B[i][j] = 0 do j: j + 1,
        if j <= cols then (
            if not emptyp(pivots) and j <= last(pivots) then is_echelon: false,
            pivots: endcons(j, pivots)
        )
    ),
    is_echelon
)$

check_reduced_row_echelon(A) := block(
    [rows, cols, pivots, i, j , k, is_reduced_echelon , B],
    B : to_matrix(A),
    rows: length(B),
    cols: length(B[1]),
    pivots: [],
    is_reduced_echelon: true,
    
    for i:1 thru rows do (
        j: 1,
        while j <= cols and B[i][j] = 0 do j: j + 1,
        if j <= cols then (
            if not emptyp(pivots) and j <= last(pivots) then is_reduced_echelon: false,
            pivots: endcons(j, pivots),
            if B[i][j] # 1 then is_reduced_echelon: false,
            for k:1 thru rows do (
                if k # i and B[k][j] # 0 then is_reduced_echelon: false
            )
        )
    ),
    is_reduced_echelon
)$

check_permutation(A) := block(
    [B,rows,cols,is_permutation , i,j , count_ones_row , count_ones_col],
    B : to_matrix(A),
    rows : length(B),
    cols : length(B[1]),
    is_permutation : true,

    if rows # cols then return(false),
    for i:1 thru rows do(
        count_ones_row : 0,
        for j:1 thru cols do(
            if B[i][j] = 1 then count_ones_row : count_ones_row+1
            else if B[i][j] # 0 then is_permutation :false
        ),
        if count_ones_row # 1 then is_permutation : false
    ),
    for j:1 thru cols do(
        count_ones_col : 0,
        for i:1 thru cols do(
            if B[i][j] = 1 then count_ones_col : count_ones_col+1
            else if B[i][j] # 0 then is_permutation :false
        ),
        if count_ones_col # 1 then is_permutation : false
    ),
    is_permutation
)$


/* Abolfazl */
random_lowertriangular(n, x) := block(
    [B],
    B : zeromatrix(n, n),
    for i:1 thru n do(
        for j:i thru n do(
            B[i, j] : 2 * random(x) - x
        )
    ),
    B
)$
